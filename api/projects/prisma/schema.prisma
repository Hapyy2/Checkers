generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id
  tasks              Task[]
  categories         Category[]
  ownedProjects      Project[]           @relation("ProjectOwner")
  projectMemberships ProjectMembership[]

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("categories")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(TODO)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([userId])
  @@index([categoryId])
  @@index([projectId])
  @@map("tasks")
}

model Project {
  id          String              @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  ownerId     String
  owner       User                @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  tasks       Task[]
  members     ProjectMembership[]

  @@map("projects")
}

model ProjectMembership {
  id         String      @id @default(cuid())
  role       ProjectRole @default(MEMBER)
  assignedAt DateTime    @default(now())

  projectId  String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_memberships")
}

enum ProjectRole {
  OWNER
  EDITOR
  MEMBER
  VIEWER
}