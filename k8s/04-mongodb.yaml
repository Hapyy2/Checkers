apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: whattodo
data:
  init-mongo.js: |
    print("Start MongoDB initialization for Kubernetes (Error Logs Indexes)");
    db = db.getSiblingDB(process.env.MONGO_INITDB_DATABASE);

    print("Creating 'errorlogs' collection and indexes for Error Service...");
    db.createCollection("errorlogs");
    db.errorlogs.createIndex({ timestamp: -1 });
    db.errorlogs.createIndex({ sourceService: 1 });
    db.errorlogs.createIndex({ errorCode: 1 });
    db.errorlogs.createIndex({ "requestDetails.userId": 1 }, { sparse: true });
    db.errorlogs.createIndex({ loggedAt: -1 });
    db.errorlogs.createIndex(
      { loggedAt: 1 },
      { expireAfterSeconds: 7776000 }
    );
    db.errorlogs.createIndex(
      {
        errorMessage: "text",
        stackTrace: "text",
      },
      {
        default_language: "none",
        name: "error_text_search_index",
      }
    );
    print("MongoDB errorlogs indexes created.");
    print("MongoDB initialization script completed.");
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: whattodo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: whattodo
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: whattodo
spec:
  serviceName: "mongodb-service"
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongodb
          image: mongo:7.0
          ports:
            - containerPort: 27017
              name: mongodb
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: MONGO_USER
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-passwords
                  key: MONGO_PASSWORD
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: MONGO_DB
          volumeMounts:
            - name: mongodb-storage
              mountPath: /data/db
            - name: mongodb-initdb
              mountPath: /docker-entrypoint-initdb.d/init-mongo.js
              subPath: init-mongo.js
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 15
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 120
            periodSeconds: 120
            timeoutSeconds: 30
            failureThreshold: 3
      volumes:
        - name: mongodb-initdb
          configMap:
            name: mongodb-init-script
  volumeClaimTemplates:
    - metadata:
        name: mongodb-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
